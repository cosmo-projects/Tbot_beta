import os
import sys
import time
import json
import logging
import argparse
from colorama import init, Fore, Style
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import PeerIdInvalid, ChannelInvalid
from config_sist import COMMAND_PREFIXES, DEFAULT_SETTINGS

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ TgCrypto
try:
    import TgCrypto
except ImportError:
    print(f"\n{Fore.YELLOW}‚ö†Ô∏è TgCrypto –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω–∏–∂–µ.")
    print(f"{Fore.CYAN}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: {Style.BRIGHT}{Fore.GREEN}pip install TgCrypto{Style.RESET_ALL}\n")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format=f'{Fore.CYAN}%(asctime)s{Style.RESET_ALL} - {Fore.BLUE}%(name)s{Style.RESET_ALL} - {Fore.YELLOW}%(levelname)s{Style.RESET_ALL} - %(message)s'
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SETTINGS_FILE = "conf.json"
API_CONFIG_FILE = "api_config.json"

def print_banner():
    """–ü–µ—á–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    banner = f"""
{Fore.MAGENTA}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
{Fore.MAGENTA}‚ïë{Style.BRIGHT}{Fore.CYAN}     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó {Fore.MAGENTA}‚ïë
{Fore.MAGENTA}‚ïë{Fore.CYAN}    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó{Fore.MAGENTA}‚ïë
{Fore.MAGENTA}‚ïë{Fore.CYAN}    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù{Fore.MAGENTA}‚ïë
{Fore.MAGENTA}‚ïë{Fore.CYAN}    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó{Fore.MAGENTA}‚ïë
{Fore.MAGENTA}‚ïë{Fore.CYAN}    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë{Fore.MAGENTA}‚ïë
{Fore.MAGENTA}‚ïë{Fore.CYAN}     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù{Fore.MAGENTA}‚ïë
{Fore.MAGENTA}‚ïë{Style.BRIGHT}{Fore.YELLOW}              TERMINAL USERBOT v2.0 - COSMO EDITION            {Fore.MAGENTA}‚ïë
{Fore.MAGENTA}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Style.RESET_ALL}
"""
    print(banner)

def print_header(title):
    """–ü–µ—á–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    header = f"""
{Fore.YELLOW}‚ïî{'‚ïê'*60}‚ïó
{Fore.YELLOW}‚ïë{Style.BRIGHT}{Fore.CYAN}{title.center(60)}{Fore.YELLOW}‚ïë
{Fore.YELLOW}‚ïö{'‚ïê'*60}‚ïù{Style.RESET_ALL}
"""
    print(header)

def get_api_credentials():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ API-–¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ü–≤–µ—Ç–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    print_header("–ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–õ–ï–ì–†–ê–ú –ê–ö–ö–ê–£–ù–¢–ê (API DATA)")
    
    print(f"{Fore.GREEN}‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API ID –∏ API HASH:")
    print(f"{Fore.CYAN}1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ {Style.BRIGHT}{Fore.BLUE}https://my.telegram.org")
    print(f"{Fore.CYAN}2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Telegram")
    print(f"{Fore.CYAN}3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'API development tools'")
    print(f"{Fore.CYAN}4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ{Style.RESET_ALL}")
    print(f"{Fore.MAGENTA}‚ïî{'‚ïê'*60}‚ïó")
    print(f"{Fore.MAGENTA}‚ïë{Style.BRIGHT}{Fore.CYAN} –í–ê–ñ–ù–û: –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ! –û–Ω–∏ –∫–∞–∫ –ø–∞—Ä–æ–ª—å! {Fore.MAGENTA}‚ïë")
    print(f"{Fore.MAGENTA}‚ïö{'‚ïê'*60}‚ïù{Style.RESET_ALL}\n")
    
    while True:
        try:
            # –í–≤–æ–¥ API ID —Å —Ü–≤–µ—Ç–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            api_id = input(f"{Style.BRIGHT}{Fore.MAGENTA}‚Ü≥ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à {Fore.CYAN}API ID{Fore.MAGENTA} (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã): {Style.RESET_ALL}{Fore.YELLOW}")
            if not api_id.isdigit():
                raise ValueError(f"{Fore.RED}API ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!")
                
            # –í–≤–æ–¥ API HASH —Å —Ü–≤–µ—Ç–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            api_hash = input(f"{Style.BRIGHT}{Fore.MAGENTA}‚Ü≥ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à {Fore.CYAN}API HASH{Fore.MAGENTA} (32 —Å–∏–º–≤–æ–ª–∞): {Style.RESET_ALL}{Fore.YELLOW}")
            if len(api_hash) != 32 or not all(c in "0123456789abcdef" for c in api_hash):
                raise ValueError(f"{Fore.RED}–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API HASH! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 32 —Å–∏–º–≤–æ–ª–∞ (a-z, 0-9)")
                
            return int(api_id), api_hash
        except ValueError as e:
            print(f"\n{Fore.RED}‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...\n")

def load_or_create_api_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API"""
    if os.path.exists(API_CONFIG_FILE):
        try:
            with open(API_CONFIG_FILE, "r") as f:
                config = json.load(f)
                print(f"{Fore.GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API{Style.RESET_ALL}")
                return config["api_id"], config["api_hash"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è API –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    
    print(f"\n{Fore.RED}‚ö†Ô∏è API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!{Style.RESET_ALL}")
    api_id, api_hash = get_api_credentials()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    with open(API_CONFIG_FILE, "w") as f:
        json.dump({"api_id": api_id, "api_hash": api_hash}, f)
        print(f"\n{Fore.GREEN}‚úÖ API –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {API_CONFIG_FILE}{Style.RESET_ALL}")
    
    return api_id, api_hash

def load_settings():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    if os.path.exists(SETTINGS_FILE):
        try:
            with open(SETTINGS_FILE, "r") as f:
                loaded_settings = json.load(f)
                print(f"{Fore.GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã{Style.RESET_ALL}")
                return {**DEFAULT_SETTINGS, **loaded_settings}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return DEFAULT_SETTINGS
    print(f"{Fore.YELLOW}‚ö†Ô∏è –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é{Style.RESET_ALL}")
    return DEFAULT_SETTINGS

def save_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    try:
        with open(SETTINGS_FILE, "w") as f:
            json.dump(settings, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def print_welcome_message(api_id):
    """–ü–µ—á–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print_header("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
    
    print(f"{Fore.YELLOW}‚îå‚îÄ{Fore.CYAN} API ID: {Fore.MAGENTA}{api_id}")
    print(f"{Fore.YELLOW}‚îú‚îÄ{Fore.CYAN} –ü—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–º–∞–Ω–¥: {Fore.MAGENTA}{', '.join(COMMAND_PREFIXES)}")
    print(f"{Fore.YELLOW}‚îú‚îÄ{Fore.CYAN} –ü–∞–ø–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤: {Fore.MAGENTA}plugin/, plugin_sist/")
    print(f"{Fore.YELLOW}‚îú‚îÄ{Fore.CYAN} –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {Fore.MAGENTA}{'–í–ö–õ–Æ–ß–ï–ù–û' if settings.get('console_logging', True) else '–í–´–ö–õ–Æ–ß–ï–ù–û'}")
    print(f"{Fore.YELLOW}‚îî‚îÄ{Fore.CYAN} –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {Fore.MAGENTA}{settings.get('time_timezone', 'UTC+3')}")
    
    print(f"\n{Style.BRIGHT}{Fore.GREEN}üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.{Style.RESET_ALL}")
    print(f"{Style.BRIGHT}{Fore.BLUE}üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ COSMO UB - –ª—É—á—à–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç!{Style.RESET_ALL}\n")

def load_commands():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –ø–ª–∞–≥–∏–Ω–æ–≤"""
    commands = {}
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ plugin
    for filename in os.listdir("plugin"):
        if filename.endswith(".py") and filename != "__init__.py":
            try:
                module_name = filename[:-3]
                module = __import__(f"plugin.{module_name}", fromlist=[module_name])
                if hasattr(module, "command") and hasattr(module, "handler"):
                    commands[module.command] = module.handler
                    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ '{module.command}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ plugin/{filename}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã plugin/{filename}: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ plugin_sist
    for filename in os.listdir("plugin_sist"):
        if filename.endswith(".py") and filename != "__init__.py":
            try:
                module_name = filename[:-3]
                module = __import__(f"plugin_sist.{module_name}", fromlist=[module_name])
                if hasattr(module, "command") and hasattr(module, "handler"):
                    commands[module.command] = module.handler
                    logger.info(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '{module.command}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ plugin_sist/{filename}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã plugin_sist/{filename}: {e}")
    return commands

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
if __name__ == "__main__":
    print_banner()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='Telegram UserBot')
    parser.add_argument('--reconfig', action='store_true', help='–ü–µ—Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å API –¥–∞–Ω–Ω—ã–µ')
    args = parser.parse_args()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if args.reconfig and os.path.exists(API_CONFIG_FILE):
        os.remove(API_CONFIG_FILE)
        print(f"\n{Fore.YELLOW}‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API —É–¥–∞–ª–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.{Style.RESET_ALL}")
        sys.exit(0)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
    api_id, api_hash = load_or_create_api_config()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    settings = load_settings()
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not settings.get("console_logging", True):
        logging.getLogger().handlers = []
        logger.info("–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤
    os.makedirs("plugin", exist_ok=True)
    os.makedirs("plugin_sist", exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    app = Client(
    "cosmo_ub",
    api_id=api_id,
    api_hash=api_hash,
    workers=2,  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ workers –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    sleep_threshold=30,  # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
    no_updates=True,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
    ipv6=False,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º IPv4
    proxy=None,  # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    test_mode=False,  # –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    app_version="Cosmo UB 2.0",
    device_model="Termux",
    system_version="Android"
)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
    commands = load_commands()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    @app.on_message(filters.private | filters.group)
    async def handle_commands(client: Client, message: Message):
        try:
            text = message.text or message.caption
            if not text:
                return

            prefix = next((p for p in COMMAND_PREFIXES if text.startswith(p)), None)
            if not prefix:
                return

            command_part = text[len(prefix):].strip()
            if not command_part:
                return

            command = command_part.split()[0].lower()
            args = command_part[len(command):].strip()

            if command in commands:
                logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}")
                start_time = time.time()
                try:
                    await commands[command](client, message, args, settings)
                    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {time.time() - start_time:.2f}—Å")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ {command}: {e}")
                    await message.reply(f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚ãû‚öôÔ∏è SYSTEM ERROR ‚öôÔ∏è‚ãü‚îÄ‚îÄ‚îÄ‚ïÆ
‚îú‚îÄ‚ñ∂ ‚ùó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!
‚îú‚îÄ‚ñ∂ üêû {str(e)}
‚ï∞‚îÄ‚îÄ‚îÄ‚ãûüåå Powered by Cosmo UB üåå‚ãü
""")
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                await message.reply(f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚ãû‚öôÔ∏è SYSTEM INFO ‚öôÔ∏è‚ãü‚îÄ‚îÄ‚îÄ‚ïÆ
‚îú‚îÄ‚ñ∂ ‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!
‚îú‚îÄ‚ñ∂ üîç {command}
‚ï∞‚îÄ‚îÄ‚îÄ‚ãûüåå Powered by Cosmo UB üåå‚ãü
""")

        except (PeerIdInvalid, ChannelInvalid) as e:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π peer/–∫–∞–Ω–∞–ª: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –ü–µ—á–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    print_welcome_message(api_id)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ COSMO UB...")
    app.run()